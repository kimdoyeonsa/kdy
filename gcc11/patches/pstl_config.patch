--- a/libstdc++-v3/include/pstl/pstl_config.h	2021-07-28 15:55:09.320315000 +0900
+++ b/libstdc++-v3/include/pstl/pstl_config.h	2022-01-01 19:17:22.237980595 +0900
@@ -7,123 +7,125 @@
 //
 //===----------------------------------------------------------------------===//
 
-#ifndef _PSTL_CONFIG_H
-#define _PSTL_CONFIG_H
+#ifndef __PSTL_config_H
+#define __PSTL_config_H
 
-// The version is XYYZ, where X is major, YY is minor, and Z is patch (i.e. X.YY.Z)
-#define _PSTL_VERSION 12000
-#define _PSTL_VERSION_MAJOR (_PSTL_VERSION / 1000)
-#define _PSTL_VERSION_MINOR ((_PSTL_VERSION % 1000) / 10)
-#define _PSTL_VERSION_PATCH (_PSTL_VERSION % 10)
+#define PSTL_VERSION 12000
+#define PSTL_VERSION_MAJOR (PSTL_VERSION / 1000)
+#define PSTL_VERSION_MINOR ((PSTL_VERSION % 1000) / 10)
+#define PSTL_VERSION_PATCH (PSTL_VERSION % 10)
 
-#if !defined(_PSTL_PAR_BACKEND_SERIAL) && !defined(_PSTL_PAR_BACKEND_TBB)
-#    error "A parallel backend must be specified"
+// Check the user-defined macro for parallel policies
+#if defined(PSTL_USE_PARALLEL_POLICIES)
+#undef __PSTL_USE_PAR_POLICIES
+#define __PSTL_USE_PAR_POLICIES PSTL_USE_PARALLEL_POLICIES
+// Check the internal macro for parallel policies
+#elif !defined(__PSTL_USE_PAR_POLICIES)
+#define __PSTL_USE_PAR_POLICIES 1
+#endif
+
+#if __PSTL_USE_PAR_POLICIES
+#if !defined(__PSTL_PAR_BACKEND_TBB)
+#define __PSTL_PAR_BACKEND_TBB 1
+#endif
+#else
+#undef __PSTL_PAR_BACKEND_TBB
 #endif
 
 // Check the user-defined macro for warnings
 #if defined(PSTL_USAGE_WARNINGS)
-#    undef _PSTL_USAGE_WARNINGS
-#    define _PSTL_USAGE_WARNINGS PSTL_USAGE_WARNINGS
+#undef __PSTL_USAGE_WARNINGS
+#define __PSTL_USAGE_WARNINGS PSTL_USAGE_WARNINGS
 // Check the internal macro for warnings
-#elif !defined(_PSTL_USAGE_WARNINGS)
-#    define _PSTL_USAGE_WARNINGS 0
+#elif !defined(__PSTL_USAGE_WARNINGS)
+#define __PSTL_USAGE_WARNINGS 0
 #endif
 
 // Portability "#pragma" definition
 #ifdef _MSC_VER
-#    define _PSTL_PRAGMA(x) __pragma(x)
+#define __PSTL_PRAGMA(x) __pragma(x)
 #else
-#    define _PSTL_PRAGMA(x) _Pragma(#    x)
+#define __PSTL_PRAGMA(x) _Pragma(#x)
 #endif
 
-#define _PSTL_STRING_AUX(x) #x
-#define _PSTL_STRING(x) _PSTL_STRING_AUX(x)
-#define _PSTL_STRING_CONCAT(x, y) x #y
-
-#ifdef _PSTL_HIDE_FROM_ABI_PER_TU
-#    define _PSTL_HIDE_FROM_ABI_PUSH                                                                                   \
-        _Pragma("clang attribute push(__attribute__((internal_linkage)), apply_to=any(function,record))")
-#    define _PSTL_HIDE_FROM_ABI_POP _Pragma("clang attribute pop")
-#else
-#    define _PSTL_HIDE_FROM_ABI_PUSH /* nothing */
-#    define _PSTL_HIDE_FROM_ABI_POP  /* nothing */
-#endif
+#define __PSTL_STRING_AUX(x) #x
+#define __PSTL_STRING(x) __PSTL_STRING_AUX(x)
+#define __PSTL_STRING_CONCAT(x, y) x #y
 
-// note that when ICC or Clang is in use, _PSTL_GCC_VERSION might not fully match
+// note that when ICC or Clang is in use, __PSTL_GCC_VERSION might not fully match
 // the actual GCC version on the system.
-#define _PSTL_GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
+#define __PSTL_GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
 
 #if __clang__
 // according to clang documentation, version can be vendor specific
-#    define _PSTL_CLANG_VERSION (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__)
+#define __PSTL_CLANG_VERSION (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__)
 #endif
 
 // Enable SIMD for compilers that support OpenMP 4.0
-#if (_OPENMP >= 201307) || (__INTEL_COMPILER >= 1600) || (!defined(__INTEL_COMPILER) && _PSTL_GCC_VERSION >= 40900) || \
-    defined(__clang__)
-#    define _PSTL_PRAGMA_SIMD _PSTL_PRAGMA(omp simd)
-#    define _PSTL_PRAGMA_DECLARE_SIMD _PSTL_PRAGMA(omp declare simd)
-#    define _PSTL_PRAGMA_SIMD_REDUCTION(PRM) _PSTL_PRAGMA(omp simd reduction(PRM))
+#if (_OPENMP >= 201307) || (__INTEL_COMPILER >= 1600) || (!defined(__INTEL_COMPILER) && __PSTL_GCC_VERSION >= 40900)
+#define __PSTL_PRAGMA_SIMD __PSTL_PRAGMA(omp simd)
+#define __PSTL_PRAGMA_DECLARE_SIMD __PSTL_PRAGMA(omp declare simd)
+#define __PSTL_PRAGMA_SIMD_REDUCTION(PRM) __PSTL_PRAGMA(omp simd reduction(PRM))
 #elif !defined(_MSC_VER) //#pragma simd
-#    define _PSTL_PRAGMA_SIMD _PSTL_PRAGMA(simd)
-#    define _PSTL_PRAGMA_DECLARE_SIMD
-#    define _PSTL_PRAGMA_SIMD_REDUCTION(PRM) _PSTL_PRAGMA(simd reduction(PRM))
+#define __PSTL_PRAGMA_SIMD __PSTL_PRAGMA(simd)
+#define __PSTL_PRAGMA_DECLARE_SIMD
+#define __PSTL_PRAGMA_SIMD_REDUCTION(PRM) __PSTL_PRAGMA(simd reduction(PRM))
 #else //no simd
-#    define _PSTL_PRAGMA_SIMD
-#    define _PSTL_PRAGMA_DECLARE_SIMD
-#    define _PSTL_PRAGMA_SIMD_REDUCTION(PRM)
+#define __PSTL_PRAGMA_SIMD
+#define __PSTL_PRAGMA_DECLARE_SIMD
+#define __PSTL_PRAGMA_SIMD_REDUCTION(PRM)
 #endif //Enable SIMD
 
 #if (__INTEL_COMPILER)
-#    define _PSTL_PRAGMA_FORCEINLINE _PSTL_PRAGMA(forceinline)
+#define __PSTL_PRAGMA_FORCEINLINE __PSTL_PRAGMA(forceinline)
 #else
-#    define _PSTL_PRAGMA_FORCEINLINE
+#define __PSTL_PRAGMA_FORCEINLINE
 #endif
 
 #if (__INTEL_COMPILER >= 1900)
-#    define _PSTL_PRAGMA_SIMD_SCAN(PRM) _PSTL_PRAGMA(omp simd reduction(inscan, PRM))
-#    define _PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM) _PSTL_PRAGMA(omp scan inclusive(PRM))
-#    define _PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM) _PSTL_PRAGMA(omp scan exclusive(PRM))
-#else
-#    define _PSTL_PRAGMA_SIMD_SCAN(PRM)
-#    define _PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM)
-#    define _PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM)
+#define __PSTL_PRAGMA_SIMD_SCAN(PRM) __PSTL_PRAGMA(omp simd reduction(inscan, PRM))
+#define __PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM) __PSTL_PRAGMA(omp scan inclusive(PRM))
+#define __PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM) __PSTL_PRAGMA(omp scan exclusive(PRM))
+#else
+#define __PSTL_PRAGMA_SIMD_SCAN(PRM)
+#define __PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM)
+#define __PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM)
 #endif
 
 // Should be defined to 1 for environments with a vendor implementation of C++17 execution policies
-#define _PSTL_CPP17_EXECUTION_POLICIES_PRESENT (_MSC_VER >= 1912)
+#define __PSTL_CPP17_EXECUTION_POLICIES_PRESENT (_MSC_VER >= 1912)
 
-#define _PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT                                                                      \
+#define __PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT                                                                     \
     (_MSC_VER >= 1900 || __cplusplus >= 201300L || __cpp_lib_robust_nonmodifying_seq_ops == 201304)
-#define _PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT                                                                      \
+#define __PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT                                                                     \
     (_MSC_VER >= 1900 || __cplusplus >= 201402L || __cpp_lib_make_reverse_iterator == 201402)
-#define _PSTL_CPP14_INTEGER_SEQUENCE_PRESENT (_MSC_VER >= 1900 || __cplusplus >= 201402L)
-#define _PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT                                                                         \
+#define __PSTL_CPP14_INTEGER_SEQUENCE_PRESENT (_MSC_VER >= 1900 || __cplusplus >= 201402L)
+#define __PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT                                                                        \
     (!__INTEL_COMPILER || __INTEL_COMPILER >= 1700) && (_MSC_FULL_VER >= 190023918 || __cplusplus >= 201402L)
 
-#define _PSTL_EARLYEXIT_PRESENT (__INTEL_COMPILER >= 1800)
-#define _PSTL_MONOTONIC_PRESENT (__INTEL_COMPILER >= 1800)
+#define __PSTL_EARLYEXIT_PRESENT (__INTEL_COMPILER >= 1800)
+#define __PSTL_MONOTONIC_PRESENT (__INTEL_COMPILER >= 1800)
 
-#if (__INTEL_COMPILER >= 1900 || !defined(__INTEL_COMPILER) && _PSTL_GCC_VERSION >= 40900 || _OPENMP >= 201307)
-#    define _PSTL_UDR_PRESENT 1
+#if (__INTEL_COMPILER >= 1900 || !defined(__INTEL_COMPILER) && __PSTL_GCC_VERSION >= 40900 || _OPENMP >= 201307)
+#define __PSTL_UDR_PRESENT 1
 #else
-#    define _PSTL_UDR_PRESENT 0
+#define __PSTL_UDR_PRESENT 0
 #endif
 
-#define _PSTL_UDS_PRESENT (__INTEL_COMPILER >= 1900 && __INTEL_COMPILER_BUILD_DATE >= 20180626)
+#define __PSTL_UDS_PRESENT (__INTEL_COMPILER >= 1900 && __INTEL_COMPILER_BUILD_DATE >= 20180626)
 
-#if _PSTL_EARLYEXIT_PRESENT
-#    define _PSTL_PRAGMA_SIMD_EARLYEXIT _PSTL_PRAGMA(omp simd early_exit)
+#if __PSTL_EARLYEXIT_PRESENT
+#define __PSTL_PRAGMA_SIMD_EARLYEXIT __PSTL_PRAGMA(omp simd early_exit)
 #else
-#    define _PSTL_PRAGMA_SIMD_EARLYEXIT
+#define __PSTL_PRAGMA_SIMD_EARLYEXIT
 #endif
 
-#if _PSTL_MONOTONIC_PRESENT
-#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM) _PSTL_PRAGMA(omp ordered simd monotonic(PRM))
-#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1, PRM2) _PSTL_PRAGMA(omp ordered simd monotonic(PRM1, PRM2))
+#if __PSTL_MONOTONIC_PRESENT
+#define __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM) __PSTL_PRAGMA(omp ordered simd monotonic(PRM))
+#define __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1, PRM2) __PSTL_PRAGMA(omp ordered simd monotonic(PRM1, PRM2))
 #else
-#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM)
-#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1, PRM2)
+#define __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM)
+#define __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1, PRM2)
 #endif
 
 // Declaration of reduction functor, where
@@ -133,41 +135,41 @@
 // omp_out - refers to the final value of the combiner operator
 // omp_priv - refers to the private copy of the initial value
 // omp_orig - refers to the original variable to be reduced
-#define _PSTL_PRAGMA_DECLARE_REDUCTION(NAME, OP)                                                                       \
-    _PSTL_PRAGMA(omp declare reduction(NAME:OP : omp_out(omp_in)) initializer(omp_priv = omp_orig))
+#define __PSTL_PRAGMA_DECLARE_REDUCTION(NAME, OP)                                                                      \
+    __PSTL_PRAGMA(omp declare reduction(NAME : OP : omp_out(omp_in)) initializer(omp_priv = omp_orig))
 
 #if (__INTEL_COMPILER >= 1600)
-#    define _PSTL_PRAGMA_VECTOR_UNALIGNED _PSTL_PRAGMA(vector unaligned)
+#define __PSTL_PRAGMA_VECTOR_UNALIGNED __PSTL_PRAGMA(vector unaligned)
 #else
-#    define _PSTL_PRAGMA_VECTOR_UNALIGNED
+#define __PSTL_PRAGMA_VECTOR_UNALIGNED
 #endif
 
 // Check the user-defined macro to use non-temporal stores
 #if defined(PSTL_USE_NONTEMPORAL_STORES) && (__INTEL_COMPILER >= 1600)
-#    define _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED _PSTL_PRAGMA(vector nontemporal)
+#define __PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED __PSTL_PRAGMA(vector nontemporal)
 #else
-#    define _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED
+#define __PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED
 #endif
 
 #if _MSC_VER || __INTEL_COMPILER //the preprocessors don't type a message location
-#    define _PSTL_PRAGMA_LOCATION __FILE__ ":" _PSTL_STRING(__LINE__) ": [Parallel STL message]: "
+#define __PSTL_PRAGMA_LOCATION __FILE__ ":" __PSTL_STRING(__LINE__) ": [Parallel STL message]: "
 #else
-#    define _PSTL_PRAGMA_LOCATION " [Parallel STL message]: "
+#define __PSTL_PRAGMA_LOCATION " [Parallel STL message]: "
 #endif
 
-#define _PSTL_PRAGMA_MESSAGE_IMPL(x) _PSTL_PRAGMA(message(_PSTL_STRING_CONCAT(_PSTL_PRAGMA_LOCATION, x)))
+#define __PSTL_PRAGMA_MESSAGE_IMPL(x) __PSTL_PRAGMA(message(__PSTL_STRING_CONCAT(__PSTL_PRAGMA_LOCATION, x)))
 
-#if _PSTL_USAGE_WARNINGS
-#    define _PSTL_PRAGMA_MESSAGE(x) _PSTL_PRAGMA_MESSAGE_IMPL(x)
-#    define _PSTL_PRAGMA_MESSAGE_POLICIES(x) _PSTL_PRAGMA_MESSAGE_IMPL(x)
+#if __PSTL_USAGE_WARNINGS
+#define __PSTL_PRAGMA_MESSAGE(x) __PSTL_PRAGMA_MESSAGE_IMPL(x)
+#define __PSTL_PRAGMA_MESSAGE_POLICIES(x) __PSTL_PRAGMA_MESSAGE_IMPL(x)
 #else
-#    define _PSTL_PRAGMA_MESSAGE(x)
-#    define _PSTL_PRAGMA_MESSAGE_POLICIES(x)
+#define __PSTL_PRAGMA_MESSAGE(x)
+#define __PSTL_PRAGMA_MESSAGE_POLICIES(x)
 #endif
 
 // broken macros
-#define _PSTL_CPP11_STD_ROTATE_BROKEN ((__GLIBCXX__ && __GLIBCXX__ < 20150716) || (_MSC_VER && _MSC_VER < 1800))
+#define __PSTL_CPP11_STD_ROTATE_BROKEN ((__GLIBCXX__ && __GLIBCXX__ < 20150716) || (_MSC_VER && _MSC_VER < 1800))
 
-#define _PSTL_ICC_18_OMP_SIMD_BROKEN (__INTEL_COMPILER == 1800)
+#define __PSTL_ICC_18_OMP_SIMD_BROKEN (__INTEL_COMPILER == 1800)
 
-#endif /* _PSTL_CONFIG_H */
+#endif /* __PSTL_config_H */
