--- a/libstdc++-v3/include/debug/macros.h	2021-07-28 15:55:09.292315000 +0900
+++ b/libstdc++-v3/include/debug/macros.h	2021-06-01 16:53:06.840501000 +0900
@@ -39,13 +39,13 @@
  *
  */
 #define _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func)	\
-  if (__builtin_expect(!bool(_Cond), false))				\
+  if (! (_Cond))							\
     __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)		\
       ._ErrMsg._M_error()
 
 #define _GLIBCXX_DEBUG_VERIFY_AT_F(_Cond,_ErrMsg,_File,_Line,_Func)	\
-  do {									\
-    __glibcxx_constexpr_assert(_Cond);					\
+  do									\
+  {									\
     _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func);	\
   } while (false)
 
@@ -94,24 +94,18 @@
 		      ._M_iterator(_First, #_First)			\
 		      ._M_integer(_Size, #_Size))
 
-#define __glibcxx_check_can_increment_dist(_First,_Dist,_Way)		\
-  _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__can_advance(_First, _Dist, _Way), \
-		      _M_message(__gnu_debug::__msg_iter_subscript_oob)	\
-		      ._M_iterator(_First, #_First)			\
-		      ._M_integer(_Way * _Dist.first, #_Dist))
-
 #define __glibcxx_check_can_increment_range(_First1,_Last1,_First2)	\
   do									\
   {									\
     typename __gnu_debug::_Distance_traits<__decltype(_First1)>::__type __dist;\
-    _GLIBCXX_DEBUG_VERIFY_AT_F(						\
+    _GLIBCXX_DEBUG_VERIFY_COND_AT(					\
 			__gnu_debug::__valid_range(_First1, _Last1, __dist),\
 			_M_message(__gnu_debug::__msg_valid_range)	\
 			._M_iterator(_First1, #_First1)			\
 			._M_iterator(_Last1, #_Last1),			\
 			__FILE__,__LINE__,__PRETTY_FUNCTION__);		\
-    _GLIBCXX_DEBUG_VERIFY_AT_F(						\
-			__gnu_debug::__can_advance(_First2, __dist, 1), \
+    _GLIBCXX_DEBUG_VERIFY_COND_AT(					\
+			__gnu_debug::__can_advance(_First2, __dist.first),\
 			_M_message(__gnu_debug::__msg_iter_subscript_oob)\
 			._M_iterator(_First2, #_First2)			\
 			._M_integer(__dist.first),			\
@@ -122,14 +116,14 @@
   do									\
   {									\
     typename __gnu_debug::_Distance_traits<__decltype(_First1)>::__type __dist;\
-    _GLIBCXX_DEBUG_VERIFY_AT_F(						\
+    _GLIBCXX_DEBUG_VERIFY_COND_AT(					\
 			__gnu_debug::__valid_range(_First1, _Last1, __dist),\
 			_M_message(__gnu_debug::__msg_valid_range)	\
 			._M_iterator(_First1, #_First1)			\
 			._M_iterator(_Last1, #_Last1),			\
 			__FILE__,__LINE__,__PRETTY_FUNCTION__);		\
-    _GLIBCXX_DEBUG_VERIFY_AT_F(						\
-			__gnu_debug::__can_advance(_First2, __dist, -1), \
+    _GLIBCXX_DEBUG_VERIFY_COND_AT(					\
+			__gnu_debug::__can_advance(_First2, -__dist.first),\
 			_M_message(__gnu_debug::__msg_iter_subscript_oob)\
 			._M_iterator(_First2, #_First2)			\
 			._M_integer(-__dist.first),			\
--- a/libstdc++-v3/include/debug/safe_iterator.h	2021-07-28 15:55:09.296315000 +0900
+++ b/libstdc++-v3/include/debug/safe_iterator.h	2021-06-01 16:53:06.844501000 +0900

@@ -35,14 +35,9 @@
 #include <debug/safe_base.h>
 #include <bits/stl_pair.h>
 #include <ext/type_traits.h>
-#if __cplusplus > 201703L
-# include <compare>
-#endif
 
 #define _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs, _BadMsgId, _DiffMsgId) \
-  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular()	\
-			|| (_Lhs.base() == _Iterator()			\
-			    && _Rhs.base() == _Iterator()),		\
+  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular(),	\
 			_M_message(_BadMsgId)				\
 			._M_iterator(_Lhs, #_Lhs)			\
 			._M_iterator(_Rhs, #_Rhs));			\

@@ -405,13 +396,7 @@
 
       // Can we advance the iterator @p __n steps (@p __n may be negative)
       bool
-      _M_can_advance(difference_type __n, bool __strict = false) const;
-
-      // Can we advance the iterator using @p __dist in @p __way direction.
-      template<typename _Diff>
-	bool
-	_M_can_advance(const std::pair<_Diff, _Distance_precision>& __dist,
-		       int __way) const;
+      _M_can_advance(difference_type __n) const;
 
       // Is the iterator range [*this, __rhs) valid?
       bool
@@ -480,7 +465,6 @@
 	  return __lhs.base() == __rhs.base();
 	}
 
-#if ! __cpp_lib_three_way_comparison
       friend bool
       operator!=(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT
       {
@@ -497,7 +481,6 @@
 	  _GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS(__lhs, __rhs);
 	  return __lhs.base() != __rhs.base();
 	}
-#endif // three-way comparison
     };
 
   template<typename _Iterator, typename _Sequence>
@@ -818,21 +801,6 @@
 	return *this;
       }
 
-#if __cpp_lib_three_way_comparison
-      friend auto
-      operator<=>(const _Self& __lhs, const _Self& __rhs) noexcept
-      {
-	_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);
-	return __lhs.base() <=> __rhs.base();
-      }
-
-      friend auto
-      operator<=>(const _Self& __lhs, const _OtherSelf& __rhs) noexcept
-      {
-	_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);
-	return __lhs.base() <=> __rhs.base();
-      }
-#else
       friend bool
       operator<(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT
       {
@@ -888,7 +856,6 @@
 	_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);
 	return __lhs.base() >= __rhs.base();
       }
-#endif // three-way comparison
 
       // _GLIBCXX_RESOLVE_LIB_DEFECTS
       // According to the resolution of DR179 not only the various comparison
@@ -964,14 +931,6 @@
 		  _Size __n)
     { return __it._M_can_advance(__n); }
 
-  template<typename _Iterator, typename _Sequence, typename _Category,
-	   typename _Diff>
-    inline bool
-    __can_advance(const _Safe_iterator<_Iterator, _Sequence, _Category>& __it,
-		  const std::pair<_Diff, _Distance_precision>& __dist,
-		  int __way)
-    { return __it._M_can_advance(__dist, __way); }
-
   template<typename _Iterator, typename _Sequence>
     _Iterator
     __base(const _Safe_iterator<_Iterator, _Sequence,
--- a/libstdc++-v3/include/debug/safe_local_iterator.h	2021-07-28 15:55:09.296315000 +0900
+++ b/libstdc++-v3/include/debug/safe_local_iterator.h	2021-06-01 16:53:06.844501000 +0900
@@ -32,9 +32,7 @@
 #include <debug/safe_unordered_base.h>
 
 #define _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs) \
-  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular()	\
-			|| (_Lhs.base() == _Iterator{}			\
-			    && _Rhs.base() == _Iterator{}),		\
+  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular(),	\
 			_M_message(__msg_iter_compare_bad)		\
 			._M_iterator(_Lhs, "lhs")			\
 			._M_iterator(_Rhs, "rhs"));			\
@@ -211,15 +209,15 @@
       _Safe_local_iterator&
       operator=(_Safe_local_iterator&& __x) noexcept
       {
+	_GLIBCXX_DEBUG_VERIFY(this != &__x,
+			      _M_message(__msg_self_move_assign)
+			      ._M_iterator(*this, "this"));
 	_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()
 			      || __x.base() == _Iterator(),
 			      _M_message(__msg_copy_singular)
 			      ._M_iterator(*this, "this")
 			      ._M_iterator(__x, "other"));
 
-	if (std::__addressof(__x) == this)
-	  return *this;
-
 	if (this->_M_sequence && this->_M_sequence == __x._M_sequence)
 	  {
 	    __gnu_cxx::__scoped_lock __l(this->_M_get_mutex());
