--- a/libstdc++-v3/include/bits/char_traits.h	2021-06-01 16:53:06.828501000 +0900
+++ b/libstdc++-v3/include/bits/char_traits.h	2021-12-30 21:40:06.131578305 +0900
@@ -39,12 +39,9 @@
 #include <bits/stl_algobase.h>  // std::copy, std::fill_n
 #include <bits/postypes.h>      // For streampos
 #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
-#if __cplusplus > 201703L
-# include <compare>
-#endif
 
 #ifndef _GLIBCXX_ALWAYS_INLINE
-# define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
+#define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
 #endif
 
 namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
@@ -94,9 +91,6 @@
       typedef typename _Char_types<_CharT>::pos_type    pos_type;
       typedef typename _Char_types<_CharT>::off_type    off_type;
       typedef typename _Char_types<_CharT>::state_type  state_type;
-#if __cpp_lib_three_way_comparison
-      using comparison_category = std::strong_ordering;
-#endif
 
       static _GLIBCXX14_CONSTEXPR void
       assign(char_type& __c1, const char_type& __c2)
@@ -119,13 +113,13 @@
       static _GLIBCXX14_CONSTEXPR const char_type*
       find(const char_type* __s, std::size_t __n, const char_type& __a);
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       assign(char_type* __s, std::size_t __n, char_type __a);
 
       static _GLIBCXX_CONSTEXPR char_type
@@ -185,29 +179,17 @@
     }
 
   template<typename _CharT>
-    _GLIBCXX20_CONSTEXPR
     typename char_traits<_CharT>::char_type*
     char_traits<_CharT>::
     move(char_type* __s1, const char_type* __s2, std::size_t __n)
     {
       if (__n == 0)
 	return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-      if (std::is_constant_evaluated())
-	{
-	  if (__s1 > __s2 && __s1 < __s2 + __n)
-	    std::copy_backward(__s2, __s2 + __n, __s1 + __n);
-	  else
-	    std::copy(__s2, __s2 + __n, __s1);
-	  return __s1;
-	}
-#endif
       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 						    __n * sizeof(char_type)));
     }
 
   template<typename _CharT>
-    _GLIBCXX20_CONSTEXPR
     typename char_traits<_CharT>::char_type*
     char_traits<_CharT>::
     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
@@ -218,7 +200,6 @@
     }
 
   template<typename _CharT>
-    _GLIBCXX20_CONSTEXPR
     typename char_traits<_CharT>::char_type*
     char_traits<_CharT>::
     assign(char_type* __s, std::size_t __n, char_type __a)
@@ -235,15 +216,8 @@
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
-#if __cplusplus >= 201703L
-
-#ifdef __cpp_lib_is_constant_evaluated
-// Unofficial macro indicating P1032R1 support in C++20
-# define __cpp_lib_constexpr_char_traits 201811L
-#else
-// Unofficial macro indicating P0426R1 support in C++17
-# define __cpp_lib_constexpr_char_traits 201611L
-#endif
+#if __cplusplus > 201402
+#define __cpp_lib_constexpr_char_traits 201611
 
   /**
    *  @brief Determine whether the characters of a NULL-terminated
@@ -253,18 +227,12 @@
    *  Assumes that _CharT is a built-in character type.
    */
   template<typename _CharT>
-    _GLIBCXX_ALWAYS_INLINE constexpr bool
+    static _GLIBCXX_ALWAYS_INLINE constexpr bool
     __constant_string_p(const _CharT* __s)
     {
-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
-      (void) __s;
-      // In constexpr contexts all strings should be constant.
-      return __builtin_is_constant_evaluated();
-#else
       while (__builtin_constant_p(*__s) && *__s)
 	__s++;
       return __builtin_constant_p(*__s);
-#endif
     }
 
   /**
@@ -276,20 +244,13 @@
    *  Assumes that _CharT is a built-in character type.
    */
   template<typename _CharT>
-    _GLIBCXX_ALWAYS_INLINE constexpr bool
+    static _GLIBCXX_ALWAYS_INLINE constexpr bool
     __constant_char_array_p(const _CharT* __a, size_t __n)
     {
-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
-      (void) __a;
-      (void) __n;
-      // In constexpr contexts all character arrays should be constant.
-      return __builtin_is_constant_evaluated();
-#else
       size_t __i = 0;
       while (__i < __n && __builtin_constant_p(__a[__i]))
 	__i++;
       return __i == __n;
-#endif
     }
 #endif
 
@@ -320,9 +281,6 @@
       typedef streampos         pos_type;
       typedef streamoff         off_type;
       typedef mbstate_t         state_type;
-#if __cpp_lib_three_way_comparison
-      using comparison_category = strong_ordering;
-#endif
 
       static _GLIBCXX17_CONSTEXPR void
       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
@@ -343,9 +301,7 @@
       static _GLIBCXX17_CONSTEXPR int
       compare(const char_type* __s1, const char_type* __s2, size_t __n)
       {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__builtin_constant_p(__n)
 	    && __constant_char_array_p(__s1, __n)
 	    && __constant_char_array_p(__s2, __n))
@@ -358,13 +314,15 @@
 	    return 0;
 	  }
 #endif
+	if (__n == 0)
+	  return 0;
 	return __builtin_memcmp(__s1, __s2, __n);
       }
 
       static _GLIBCXX17_CONSTEXPR size_t
       length(const char_type* __s)
       {
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__constant_string_p(__s))
 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 #endif
@@ -374,50 +332,38 @@
       static _GLIBCXX17_CONSTEXPR const char_type*
       find(const char_type* __s, size_t __n, const char_type& __a)
       {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__builtin_constant_p(__n)
 	    && __builtin_constant_p(__a)
 	    && __constant_char_array_p(__s, __n))
 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 #endif
+	if (__n == 0)
+	  return 0;
 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       move(char_type* __s1, const char_type* __s2, size_t __n)
       {
 	if (__n == 0)
 	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
-#endif
 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       copy(char_type* __s1, const char_type* __s2, size_t __n)
       {
 	if (__n == 0)
 	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
-#endif
 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       assign(char_type* __s, size_t __n, char_type __a)
       {
 	if (__n == 0)
 	  return __s;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
-#endif
 	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
       }
 
@@ -455,9 +401,6 @@
       typedef streamoff         off_type;
       typedef wstreampos        pos_type;
       typedef mbstate_t         state_type;
-#if __cpp_lib_three_way_comparison
-      using comparison_category = strong_ordering;
-#endif
 
       static _GLIBCXX17_CONSTEXPR void
       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
@@ -474,74 +417,65 @@
       static _GLIBCXX17_CONSTEXPR int
       compare(const char_type* __s1, const char_type* __s2, size_t __n)
       {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__builtin_constant_p(__n)
 	    && __constant_char_array_p(__s1, __n)
 	    && __constant_char_array_p(__s2, __n))
 	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
 #endif
-	return wmemcmp(__s1, __s2, __n);
+	if (__n == 0)
+	  return 0;
+	else
+	  return wmemcmp(__s1, __s2, __n);
       }
 
       static _GLIBCXX17_CONSTEXPR size_t
       length(const char_type* __s)
       {
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__constant_string_p(__s))
 	  return __gnu_cxx::char_traits<char_type>::length(__s);
+	else
 #endif
-	return wcslen(__s);
+	  return wcslen(__s);
       }
 
       static _GLIBCXX17_CONSTEXPR const char_type*
       find(const char_type* __s, size_t __n, const char_type& __a)
       {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__builtin_constant_p(__n)
 	    && __builtin_constant_p(__a)
 	    && __constant_char_array_p(__s, __n))
 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 #endif
-	return wmemchr(__s, __a, __n);
+	if (__n == 0)
+	  return 0;
+	else
+	  return wmemchr(__s, __a, __n);
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       move(char_type* __s1, const char_type* __s2, size_t __n)
       {
 	if (__n == 0)
 	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
-#endif
 	return wmemmove(__s1, __s2, __n);
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       copy(char_type* __s1, const char_type* __s2, size_t __n)
       {
 	if (__n == 0)
 	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
-#endif
 	return wmemcpy(__s1, __s2, __n);
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       assign(char_type* __s, size_t __n, char_type __a)
       {
 	if (__n == 0)
 	  return __s;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
-#endif
 	return wmemset(__s, __a, __n);
       }
 
@@ -567,134 +501,11 @@
   };
 #endif //_GLIBCXX_USE_WCHAR_T
 
-#ifdef _GLIBCXX_USE_CHAR8_T
-  template<>
-    struct char_traits<char8_t>
-    {
-      typedef char8_t           char_type;
-      typedef unsigned int      int_type;
-      typedef u8streampos       pos_type;
-      typedef streamoff         off_type;
-      typedef mbstate_t         state_type;
-#if __cpp_lib_three_way_comparison
-      using comparison_category = strong_ordering;
-#endif
-
-      static _GLIBCXX17_CONSTEXPR void
-      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
-      { __c1 = __c2; }
-
-      static _GLIBCXX_CONSTEXPR bool
-      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
-      { return __c1 == __c2; }
-
-      static _GLIBCXX_CONSTEXPR bool
-      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
-      { return __c1 < __c2; }
-
-      static _GLIBCXX17_CONSTEXPR int
-      compare(const char_type* __s1, const char_type* __s2, size_t __n)
-      {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus > 201402
-	if (__builtin_constant_p(__n)
-	    && __constant_char_array_p(__s1, __n)
-	    && __constant_char_array_p(__s2, __n))
-	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
-#endif
-	return __builtin_memcmp(__s1, __s2, __n);
-      }
-
-      static _GLIBCXX17_CONSTEXPR size_t
-      length(const char_type* __s)
-      {
-#if __cplusplus > 201402
-	if (__constant_string_p(__s))
-	  return __gnu_cxx::char_traits<char_type>::length(__s);
-#endif
-	size_t __i = 0;
-	while (!eq(__s[__i], char_type()))
-	  ++__i;
-	return __i;
-      }
-
-      static _GLIBCXX17_CONSTEXPR const char_type*
-      find(const char_type* __s, size_t __n, const char_type& __a)
-      {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus > 201402
-	if (__builtin_constant_p(__n)
-	    && __builtin_constant_p(__a)
-	    && __constant_char_array_p(__s, __n))
-	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
-#endif
-	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
-      }
-
-      static _GLIBCXX20_CONSTEXPR char_type*
-      move(char_type* __s1, const char_type* __s2, size_t __n)
-      {
-	if (__n == 0)
-	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
-#endif
-	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
-      }
-
-      static _GLIBCXX20_CONSTEXPR char_type*
-      copy(char_type* __s1, const char_type* __s2, size_t __n)
-      {
-	if (__n == 0)
-	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
-#endif
-	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
-      }
-
-      static _GLIBCXX20_CONSTEXPR char_type*
-      assign(char_type* __s, size_t __n, char_type __a)
-      {
-	if (__n == 0)
-	  return __s;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
-#endif
-	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
-      }
-
-      static _GLIBCXX_CONSTEXPR char_type
-      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT
-      { return char_type(__c); }
-
-      static _GLIBCXX_CONSTEXPR int_type
-      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT
-      { return int_type(__c); }
-
-      static _GLIBCXX_CONSTEXPR bool
-      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT
-      { return __c1 == __c2; }
-
-      static _GLIBCXX_CONSTEXPR int_type
-      eof() _GLIBCXX_NOEXCEPT
-      { return static_cast<int_type>(-1); }
-
-      static _GLIBCXX_CONSTEXPR int_type
-      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT
-      { return eq_int_type(__c, eof()) ? 0 : __c; }
-    };
-#endif //_GLIBCXX_USE_CHAR8_T
-
 _GLIBCXX_END_NAMESPACE_VERSION
 } // namespace
 
-#if __cplusplus >= 201103L
+#if ((__cplusplus >= 201103L) \
+     && defined(_GLIBCXX_USE_C99_STDINT_TR1))
 
 #include <cstdint>
 
@@ -706,19 +517,10 @@
     struct char_traits<char16_t>
     {
       typedef char16_t          char_type;
-#ifdef _GLIBCXX_USE_C99_STDINT_TR1
       typedef uint_least16_t    int_type;
-#elif defined __UINT_LEAST16_TYPE__
-      typedef __UINT_LEAST16_TYPE__	    int_type;
-#else
-      typedef make_unsigned<char16_t>::type int_type;
-#endif
       typedef streamoff         off_type;
       typedef u16streampos      pos_type;
       typedef mbstate_t         state_type;
-#if __cpp_lib_three_way_comparison
-      using comparison_category = strong_ordering;
-#endif
 
       static _GLIBCXX17_CONSTEXPR void
       assign(char_type& __c1, const char_type& __c2) noexcept
@@ -761,33 +563,25 @@
 	return 0;
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       move(char_type* __s1, const char_type* __s2, size_t __n)
       {
 	if (__n == 0)
 	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
-#endif
 	return (static_cast<char_type*>
 		(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       copy(char_type* __s1, const char_type* __s2, size_t __n)
       {
 	if (__n == 0)
 	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
-#endif
 	return (static_cast<char_type*>
 		(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       assign(char_type* __s, size_t __n, char_type __a)
       {
 	for (size_t __i = 0; __i < __n; ++__i)
@@ -820,19 +614,10 @@
     struct char_traits<char32_t>
     {
       typedef char32_t          char_type;
-#ifdef _GLIBCXX_USE_C99_STDINT_TR1
       typedef uint_least32_t    int_type;
-#elif defined __UINT_LEAST32_TYPE__
-      typedef __UINT_LEAST32_TYPE__	    int_type;
-#else
-      typedef make_unsigned<char32_t>::type int_type;
-#endif
       typedef streamoff         off_type;
       typedef u32streampos      pos_type;
       typedef mbstate_t         state_type;
-#if __cpp_lib_three_way_comparison
-      using comparison_category = strong_ordering;
-#endif
 
       static _GLIBCXX17_CONSTEXPR void
       assign(char_type& __c1, const char_type& __c2) noexcept
@@ -875,33 +660,25 @@
 	return 0;
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       move(char_type* __s1, const char_type* __s2, size_t __n)
       {
 	if (__n == 0)
 	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
-#endif
 	return (static_cast<char_type*>
 		(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       copy(char_type* __s1, const char_type* __s2, size_t __n)
       { 
 	if (__n == 0)
 	  return __s1;
-#ifdef __cpp_lib_is_constant_evaluated
-	if (std::is_constant_evaluated())
-	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
-#endif
 	return (static_cast<char_type*>
 		(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
       }
 
-      static _GLIBCXX20_CONSTEXPR char_type*
+      static char_type*
       assign(char_type* __s, size_t __n, char_type __a)
       {
 	for (size_t __i = 0; __i < __n; ++__i)
@@ -930,28 +707,9 @@
       { return eq_int_type(__c, eof()) ? 0 : __c; }
     };
 
-#if __cpp_lib_three_way_comparison
-  namespace __detail
-  {
-    template<typename _ChTraits>
-      constexpr auto
-      __char_traits_cmp_cat(int __cmp) noexcept
-      {
-	if constexpr (requires { typename _ChTraits::comparison_category; })
-	  {
-	    using _Cat = typename _ChTraits::comparison_category;
-	    static_assert( !is_void_v<common_comparison_category_t<_Cat>> );
-	    return static_cast<_Cat>(__cmp <=> 0);
-	  }
-	else
-	  return static_cast<weak_ordering>(__cmp <=> 0);
-      }
-  } // namespace __detail
-#endif // C++20
-
 _GLIBCXX_END_NAMESPACE_VERSION
 } // namespace
 
-#endif  // C++11
+#endif 
 
 #endif // _CHAR_TRAITS_H


