--- a/libstdc++-v3/include/bits/move.h	2021-07-28 15:55:09.284315000 +0900
+++ b/libstdc++-v3/include/bits/move.h	2021-06-01 16:53:06.832501000 +0900
@@ -32,7 +32,7 @@
 
 #include <bits/c++config.h>
 #if __cplusplus < 201103L
-# include <bits/concept_check.h>
+#include <bits/concept_check.h>
 #endif
 
 namespace std _GLIBCXX_VISIBILITY(default)
@@ -72,7 +72,6 @@
    *  This function is used to implement "perfect forwarding".
    */
   template<typename _Tp>
-    _GLIBCXX_NODISCARD
     constexpr _Tp&&
     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
     { return static_cast<_Tp&&>(__t); }
@@ -84,12 +83,11 @@
    *  This function is used to implement "perfect forwarding".
    */
   template<typename _Tp>
-    _GLIBCXX_NODISCARD
     constexpr _Tp&&
     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
     {
       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
-		    " substituting _Tp must not be an lvalue reference type");
+		    " substituting _Tp is an lvalue reference type");
       return static_cast<_Tp&&>(__t);
     }
 
@@ -99,7 +97,6 @@
    *  @return The parameter cast to an rvalue-reference to allow moving it.
   */
   template<typename _Tp>
-    _GLIBCXX_NODISCARD
     constexpr typename std::remove_reference<_Tp>::type&&
     move(_Tp&& __t) noexcept
     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
@@ -119,7 +116,6 @@
    *  type is copyable, in which case an lvalue-reference is returned instead.
    */
   template<typename _Tp>
-    _GLIBCXX_NODISCARD
     constexpr typename
     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
     move_if_noexcept(_Tp& __x) noexcept
@@ -140,7 +136,6 @@
    *  @return   The actual address.
   */
   template<typename _Tp>
-    _GLIBCXX_NODISCARD
     inline _GLIBCXX17_CONSTEXPR _Tp*
     addressof(_Tp& __r) noexcept
     { return std::__addressof(__r); }
@@ -163,11 +158,9 @@
 
   /// @} group utilities
 
-#define _GLIBCXX_FWDREF(_Tp) _Tp&&
 #define _GLIBCXX_MOVE(__val) std::move(__val)
 #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
 #else
-#define _GLIBCXX_FWDREF(_Tp) const _Tp&
 #define _GLIBCXX_MOVE(__val) (__val)
 #define _GLIBCXX_FORWARD(_Tp, __val) (__val)
 #endif
