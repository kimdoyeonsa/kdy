--- a/libstdc++-v3/include/bits/char_traits.h	2021-06-01 16:53:06.828501000 +0900
+++ b/libstdc++-v3/include/bits/char_traits.h	2021-12-30 21:40:06.131578305 +0900
@@ -41,7 +41,7 @@
 #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
 
 #ifndef _GLIBCXX_ALWAYS_INLINE
-# define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
+#define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
 #endif
 
 namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
@@ -216,7 +216,7 @@
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 #define __cpp_lib_constexpr_char_traits 201611
 
   /**
@@ -230,15 +230,9 @@
     static _GLIBCXX_ALWAYS_INLINE constexpr bool
     __constant_string_p(const _CharT* __s)
     {
-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
-      (void) __s;
-      // In constexpr contexts all strings should be constant.
-      return __builtin_is_constant_evaluated();
-#else
       while (__builtin_constant_p(*__s) && *__s)
 	__s++;
       return __builtin_constant_p(*__s);
-#endif
     }
 
   /**
@@ -253,17 +247,10 @@
     static _GLIBCXX_ALWAYS_INLINE constexpr bool
     __constant_char_array_p(const _CharT* __a, size_t __n)
     {
-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
-      (void) __a;
-      (void) __n;
-      // In constexpr contexts all character arrays should be constant.
-      return __builtin_is_constant_evaluated();
-#else
       size_t __i = 0;
       while (__i < __n && __builtin_constant_p(__a[__i]))
 	__i++;
       return __i == __n;
-#endif
     }
 #endif
 
@@ -314,9 +301,7 @@
       static _GLIBCXX17_CONSTEXPR int
       compare(const char_type* __s1, const char_type* __s2, size_t __n)
       {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__builtin_constant_p(__n)
 	    && __constant_char_array_p(__s1, __n)
 	    && __constant_char_array_p(__s2, __n))
@@ -329,13 +314,15 @@
 	    return 0;
 	  }
 #endif
+	if (__n == 0)
+	  return 0;
 	return __builtin_memcmp(__s1, __s2, __n);
       }
 
       static _GLIBCXX17_CONSTEXPR size_t
       length(const char_type* __s)
       {
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__constant_string_p(__s))
 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 #endif
@@ -345,14 +332,14 @@
       static _GLIBCXX17_CONSTEXPR const char_type*
       find(const char_type* __s, size_t __n, const char_type& __a)
       {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__builtin_constant_p(__n)
 	    && __builtin_constant_p(__a)
 	    && __constant_char_array_p(__s, __n))
 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 #endif
+	if (__n == 0)
+	  return 0;
 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
       }
 
@@ -430,39 +417,42 @@
       static _GLIBCXX17_CONSTEXPR int
       compare(const char_type* __s1, const char_type* __s2, size_t __n)
       {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__builtin_constant_p(__n)
 	    && __constant_char_array_p(__s1, __n)
 	    && __constant_char_array_p(__s2, __n))
 	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
 #endif
-	return wmemcmp(__s1, __s2, __n);
+	if (__n == 0)
+	  return 0;
+	else
+	  return wmemcmp(__s1, __s2, __n);
       }
 
       static _GLIBCXX17_CONSTEXPR size_t
       length(const char_type* __s)
       {
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__constant_string_p(__s))
 	  return __gnu_cxx::char_traits<char_type>::length(__s);
+	else
 #endif
-	return wcslen(__s);
+	  return wcslen(__s);
       }
 
       static _GLIBCXX17_CONSTEXPR const char_type*
       find(const char_type* __s, size_t __n, const char_type& __a)
       {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus >= 201703L
+#if __cplusplus > 201402
 	if (__builtin_constant_p(__n)
 	    && __builtin_constant_p(__a)
 	    && __constant_char_array_p(__s, __n))
 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 #endif
-	return wmemchr(__s, __a, __n);
+	if (__n == 0)
+	  return 0;
+	else
+	  return wmemchr(__s, __a, __n);
       }
 
       static char_type*
@@ -511,119 +501,11 @@
   };
 #endif //_GLIBCXX_USE_WCHAR_T
 
-#ifdef _GLIBCXX_USE_CHAR8_T
-  template<>
-    struct char_traits<char8_t>
-    {
-      typedef char8_t           char_type;
-      typedef unsigned int      int_type;
-      typedef u8streampos       pos_type;
-      typedef streamoff         off_type;
-      typedef mbstate_t         state_type;
-
-      static _GLIBCXX17_CONSTEXPR void
-      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
-      { __c1 = __c2; }
-
-      static _GLIBCXX_CONSTEXPR bool
-      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
-      { return __c1 == __c2; }
-
-      static _GLIBCXX_CONSTEXPR bool
-      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
-      { return __c1 < __c2; }
-
-      static _GLIBCXX17_CONSTEXPR int
-      compare(const char_type* __s1, const char_type* __s2, size_t __n)
-      {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus > 201402
-	if (__builtin_constant_p(__n)
-	    && __constant_char_array_p(__s1, __n)
-	    && __constant_char_array_p(__s2, __n))
-	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
-#endif
-	return __builtin_memcmp(__s1, __s2, __n);
-      }
-
-      static _GLIBCXX17_CONSTEXPR size_t
-      length(const char_type* __s)
-      {
-#if __cplusplus > 201402
-	if (__constant_string_p(__s))
-	  return __gnu_cxx::char_traits<char_type>::length(__s);
-#endif
-	size_t __i = 0;
-	while (!eq(__s[__i], char_type()))
-	  ++__i;
-	return __i;
-      }
-
-      static _GLIBCXX17_CONSTEXPR const char_type*
-      find(const char_type* __s, size_t __n, const char_type& __a)
-      {
-	if (__n == 0)
-	  return 0;
-#if __cplusplus > 201402
-	if (__builtin_constant_p(__n)
-	    && __builtin_constant_p(__a)
-	    && __constant_char_array_p(__s, __n))
-	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
-#endif
-	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
-      }
-
-      static char_type*
-      move(char_type* __s1, const char_type* __s2, size_t __n)
-      {
-	if (__n == 0)
-	  return __s1;
-	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
-      }
-
-      static char_type*
-      copy(char_type* __s1, const char_type* __s2, size_t __n)
-      {
-	if (__n == 0)
-	  return __s1;
-	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
-      }
-
-      static char_type*
-      assign(char_type* __s, size_t __n, char_type __a)
-      {
-	if (__n == 0)
-	  return __s;
-	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
-      }
-
-      static _GLIBCXX_CONSTEXPR char_type
-      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT
-      { return char_type(__c); }
-
-      static _GLIBCXX_CONSTEXPR int_type
-      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT
-      { return int_type(__c); }
-
-      static _GLIBCXX_CONSTEXPR bool
-      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT
-      { return __c1 == __c2; }
-
-      static _GLIBCXX_CONSTEXPR int_type
-      eof() _GLIBCXX_NOEXCEPT
-      { return static_cast<int_type>(-1); }
-
-      static _GLIBCXX_CONSTEXPR int_type
-      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT
-      { return eq_int_type(__c, eof()) ? 0 : __c; }
-    };
-#endif //_GLIBCXX_USE_CHAR8_T
-
 _GLIBCXX_END_NAMESPACE_VERSION
 } // namespace
 
-#if __cplusplus >= 201103L
+#if ((__cplusplus >= 201103L) \
+     && defined(_GLIBCXX_USE_C99_STDINT_TR1))
 
 #include <cstdint>
 
@@ -635,13 +517,7 @@
     struct char_traits<char16_t>
     {
       typedef char16_t          char_type;
-#ifdef _GLIBCXX_USE_C99_STDINT_TR1
       typedef uint_least16_t    int_type;
-#elif defined __UINT_LEAST16_TYPE__
-      typedef __UINT_LEAST16_TYPE__	    int_type;
-#else
-      typedef make_unsigned<char16_t>::type int_type;
-#endif
       typedef streamoff         off_type;
       typedef u16streampos      pos_type;
       typedef mbstate_t         state_type;
@@ -738,13 +614,7 @@
     struct char_traits<char32_t>
     {
       typedef char32_t          char_type;
-#ifdef _GLIBCXX_USE_C99_STDINT_TR1
       typedef uint_least32_t    int_type;
-#elif defined __UINT_LEAST32_TYPE__
-      typedef __UINT_LEAST32_TYPE__	    int_type;
-#else
-      typedef make_unsigned<char32_t>::type int_type;
-#endif
       typedef streamoff         off_type;
       typedef u32streampos      pos_type;
       typedef mbstate_t         state_type;
@@ -840,6 +710,6 @@
 _GLIBCXX_END_NAMESPACE_VERSION
 } // namespace
 
-#endif  // C++11
+#endif 
 
 #endif // _CHAR_TRAITS_H

