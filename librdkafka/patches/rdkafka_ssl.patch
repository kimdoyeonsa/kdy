--- a/src/rdkafka_ssl.c	2021-10-12 05:15:44.000000000 +0900
+++ b/src/rdkafka_ssl.c	2021-11-18 00:17:14.000000000 +0900

@@ -973,74 +961,31 @@
                 /* OpenSSL takes ownership of the store */
                 rk->rk_conf.ssl.ca->store = NULL;
 
-                ca_probe = rd_false;
-
-        } else {
-
-                if (rk->rk_conf.ssl.ca_location &&
-                    strcmp(rk->rk_conf.ssl.ca_location, "probe")) {
-                        /* CA certificate location, either file or directory. */
-                        int is_dir = rd_kafka_path_is_dir(
-                                rk->rk_conf.ssl.ca_location);
-
-                        rd_kafka_dbg(rk, SECURITY, "SSL",
-                                     "Loading CA certificate(s) from %s %s",
-                                     is_dir ? "directory" : "file",
-                                     rk->rk_conf.ssl.ca_location);
-
-                        r = SSL_CTX_load_verify_locations(ctx,
-                                                          !is_dir ?
-                                                          rk->rk_conf.ssl.
-                                                          ca_location : NULL,
-                                                          is_dir ?
-                                                          rk->rk_conf.ssl.
-                                                          ca_location : NULL);
-
-                        if (r != 1) {
-                                rd_snprintf(errstr, errstr_size,
-                                            "ssl.ca.location failed: ");
-                                return -1;
-                        }
+        } else if (rk->rk_conf.ssl.ca_location &&
+                   strcmp(rk->rk_conf.ssl.ca_location, "probe")) {
+                /* CA certificate location, either file or directory. */
+                int is_dir = rd_kafka_path_is_dir(rk->rk_conf.ssl.ca_location);
 
-                        ca_probe = rd_false;
-                }
-
-                if (rk->rk_conf.ssl.ca_pem) {
-                        /* CA as PEM string */
-                        X509 *x509;
-                        X509_STORE *store;
-
-                        /* Get the OpenSSL trust store */
-                        store = SSL_CTX_get_cert_store(ctx);
-                        rd_assert(store != NULL);
-
-                        rd_kafka_dbg(rk, SECURITY, "SSL",
-                                     "Loading CA certificate from string");
-
-                        x509 = rd_kafka_ssl_X509_from_string(
-                                rk, rk->rk_conf.ssl.ca_pem);
-                        if (!x509) {
-                                rd_snprintf(errstr, errstr_size,
-                                            "ssl.ca.pem failed: "
-                                            "not in PEM format?: ");
-                                return -1;
-                        }
-
-                        if (!X509_STORE_add_cert(store, x509)) {
-                                rd_snprintf(errstr, errstr_size,
-                                            "failed to add ssl.ca.pem to "
-                                            "CA cert store: ");
-                                X509_free(x509);
-                                return -1;
-                        }
+                rd_kafka_dbg(rk, SECURITY, "SSL",
+                             "Loading CA certificate(s) from %s %s",
+                             is_dir ? "directory" : "file",
+                             rk->rk_conf.ssl.ca_location);
 
-                        X509_free(x509);
+                r = SSL_CTX_load_verify_locations(ctx,
+                                                  !is_dir ?
+                                                  rk->rk_conf.ssl.
+                                                  ca_location : NULL,
+                                                  is_dir ?
+                                                  rk->rk_conf.ssl.
+                                                  ca_location : NULL);
 
-                        ca_probe = rd_false;
+                if (r != 1) {
+                        rd_snprintf(errstr, errstr_size,
+                                    "ssl.ca.location failed: ");
+                        return -1;
                 }
-        }
 
-        if (ca_probe) {
+        } else {
 #ifdef _WIN32
                 /* Attempt to load CA root certificates from the
                  * configured Windows certificate stores. */
@@ -1321,80 +1266,6 @@
                 check_pkey = rd_true;
         }
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000
-        /*
-         * If applicable, use OpenSSL engine to fetch SSL certificate.
-         */
-        if (rk->rk_conf.ssl.engine) {
-                STACK_OF(X509_NAME) *cert_names = sk_X509_NAME_new_null();
-                STACK_OF(X509_OBJECT) *roots =
-                    X509_STORE_get0_objects(SSL_CTX_get_cert_store(ctx));
-                X509 *x509 = NULL;
-                EVP_PKEY *pkey = NULL;
-                int i = 0;
-                for (i = 0; i < sk_X509_OBJECT_num(roots); i++) {
-                        x509 = X509_OBJECT_get0_X509(sk_X509_OBJECT_value(roots,
-                                                                          i));
-
-                        if (x509)
-                                sk_X509_NAME_push(cert_names,
-                                                  X509_get_subject_name(x509));
-                }
-
-                if (cert_names)
-                        sk_X509_NAME_free(cert_names);
-
-                x509 = NULL;
-                r = ENGINE_load_ssl_client_cert(
-                        rk->rk_conf.ssl.engine, NULL,
-                        cert_names, &x509, &pkey,
-                        NULL, NULL,
-                        rk->rk_conf.ssl.engine_callback_data);
-
-                sk_X509_NAME_free(cert_names);
-                if (r == -1 || !x509 || !pkey) {
-                        X509_free(x509);
-                        EVP_PKEY_free(pkey);
-                        if (r == -1)
-                                rd_snprintf(errstr, errstr_size,
-                                            "OpenSSL "
-                                            "ENGINE_load_ssl_client_cert "
-                                            "failed: ");
-                        else if (!x509)
-                                rd_snprintf(errstr, errstr_size,
-                                            "OpenSSL engine failed to "
-                                            "load certificate: ");
-                        else
-                                rd_snprintf(errstr, errstr_size,
-                                            "OpenSSL engine failed to "
-                                            "load private key: ");
-
-                        return -1;
-                }
-
-                r = SSL_CTX_use_certificate(ctx, x509);
-                X509_free(x509);
-                if (r != 1) {
-                        rd_snprintf(errstr, errstr_size,
-                                    "Failed to use SSL_CTX_use_certificate "
-                                    "with engine: ");
-                        EVP_PKEY_free(pkey);
-                        return -1;
-                }
-
-                r = SSL_CTX_use_PrivateKey(ctx, pkey);
-                EVP_PKEY_free(pkey);
-                if (r != 1) {
-                        rd_snprintf(errstr, errstr_size,
-                                    "Failed to use SSL_CTX_use_PrivateKey "
-                                    "with engine: ");
-                        return -1;
-                }
-
-                check_pkey = rd_true;
-        }
-#endif
-
         /* Check that a valid private/public key combo was set. */
         if (check_pkey && SSL_CTX_check_private_key(ctx) != 1) {
                 rd_snprintf(errstr, errstr_size,
@@ -1416,81 +1287,7 @@
 void rd_kafka_ssl_ctx_term (rd_kafka_t *rk) {
         SSL_CTX_free(rk->rk_conf.ssl.ctx);
         rk->rk_conf.ssl.ctx = NULL;
-
-#if OPENSSL_VERSION_NUMBER >= 0x10100000
-        RD_IF_FREE(rk->rk_conf.ssl.engine, ENGINE_free);
-#endif
-}
-
-
-#if OPENSSL_VERSION_NUMBER >= 0x10100000
-/**
- * @brief Initialize and load OpenSSL engine, if configured.
- *
- * @returns true on success, false on error.
- */
-static rd_bool_t rd_kafka_ssl_ctx_init_engine (rd_kafka_t *rk,
-                                               char *errstr,
-                                               size_t errstr_size) {
-        ENGINE *engine;
-
-        /* OpenSSL loads an engine as dynamic id and stores it in
-         * internal list, as per LIST_ADD command below. If engine
-         * already exists in internal list, it is supposed to be
-         * fetched using engine id.
-         */
-        engine = ENGINE_by_id(rk->rk_conf.ssl.engine_id);
-        if (!engine) {
-                engine = ENGINE_by_id("dynamic");
-                if (!engine) {
-                        rd_snprintf(errstr, errstr_size,
-                                    "OpenSSL engine initialization failed in"
-                                    " ENGINE_by_id: ");
-                        return rd_false;
-                }
-        }
-
-        if (!ENGINE_ctrl_cmd_string(engine, "SO_PATH",
-                                    rk->rk_conf.ssl.engine_location,
-                                    0)) {
-                ENGINE_free(engine);
-                rd_snprintf(errstr, errstr_size,
-                            "OpenSSL engine initialization failed in"
-                            " ENGINE_ctrl_cmd_string SO_PATH: ");
-                return rd_false;
-        }
-
-        if (!ENGINE_ctrl_cmd_string(engine, "LIST_ADD",
-                                    "1", 0)) {
-                ENGINE_free(engine);
-                rd_snprintf(errstr, errstr_size,
-                            "OpenSSL engine initialization failed in"
-                            " ENGINE_ctrl_cmd_string LIST_ADD: ");
-                return rd_false;
-        }
-
-        if (!ENGINE_ctrl_cmd_string(engine, "LOAD", NULL, 0)) {
-                ENGINE_free(engine);
-                rd_snprintf(errstr, errstr_size,
-                            "OpenSSL engine initialization failed in"
-                            " ENGINE_ctrl_cmd_string LOAD: ");
-                return rd_false;
-        }
-
-        if (!ENGINE_init(engine)) {
-                ENGINE_free(engine);
-                rd_snprintf(errstr, errstr_size,
-                            "OpenSSL engine initialization failed in"
-                            " ENGINE_init: ");
-                return rd_false;
-        }
-
-        rk->rk_conf.ssl.engine = engine;
-
-        return rd_true;
 }
-#endif
-
 
 /**
  * @brief Once per rd_kafka_t handle initialization of OpenSSL
@@ -1501,7 +1298,7 @@
  */
 int rd_kafka_ssl_ctx_init (rd_kafka_t *rk, char *errstr, size_t errstr_size) {
         int r;
-        SSL_CTX *ctx = NULL;
+        SSL_CTX *ctx;
         const char *linking =
 #if WITH_STATIC_LIB_libcrypto
                 "statically linked "
@@ -1526,24 +1323,10 @@
         if (errstr_size > 0)
                 errstr[0] = '\0';
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000
-        if (rk->rk_conf.ssl.engine_location && !rk->rk_conf.ssl.engine) {
-                rd_kafka_dbg(rk, SECURITY, "SSL",
-                             "Loading OpenSSL engine from \"%s\"",
-                             rk->rk_conf.ssl.engine_location);
-                if (!rd_kafka_ssl_ctx_init_engine(rk, errstr, errstr_size))
-                        goto fail;
-        }
-#endif
-
-#if OPENSSL_VERSION_NUMBER >= 0x10100000
-        ctx = SSL_CTX_new(TLS_client_method());
-#else
         ctx = SSL_CTX_new(SSLv23_client_method());
-#endif
         if (!ctx) {
                 rd_snprintf(errstr, errstr_size,
-                            "SSL_CTX_new() failed: ");
+                            "SSLv23_client_method() failed: ");
                 goto fail;
         }
 
@@ -1622,10 +1405,7 @@
         r = (int)strlen(errstr);
         rd_kafka_ssl_error(rk, NULL, errstr+r,
                            (int)errstr_size > r ? (int)errstr_size - r : 0);
-        RD_IF_FREE(ctx, SSL_CTX_free);
-#if OPENSSL_VERSION_NUMBER >= 0x10100000
-        RD_IF_FREE(rk->rk_conf.ssl.engine, ENGINE_free);
-#endif
+        SSL_CTX_free(ctx);
 
         return -1;
 }
